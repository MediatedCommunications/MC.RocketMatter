//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MC.RocketMatter.Router {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Router.IRouter")]
    public interface IRouter {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouter/GetDomainForInstall", ReplyAction="http://tempuri.org/IRouter/GetDomainForInstallResponse")]
        string GetDomainForInstall(string InstallName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouter/GetDomainForInstall", ReplyAction="http://tempuri.org/IRouter/GetDomainForInstallResponse")]
        System.Threading.Tasks.Task<string> GetDomainForInstallAsync(string InstallName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouter/Ping", ReplyAction="http://tempuri.org/IRouter/PingResponse")]
        string Ping();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouter/Ping", ReplyAction="http://tempuri.org/IRouter/PingResponse")]
        System.Threading.Tasks.Task<string> PingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouter/SegmentChanged", ReplyAction="http://tempuri.org/IRouter/SegmentChangedResponse")]
        bool SegmentChanged(string InstallName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouter/SegmentChanged", ReplyAction="http://tempuri.org/IRouter/SegmentChangedResponse")]
        System.Threading.Tasks.Task<bool> SegmentChangedAsync(string InstallName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRouterChannel : MC.RocketMatter.Router.IRouter, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RouterClient : System.ServiceModel.ClientBase<MC.RocketMatter.Router.IRouter>, MC.RocketMatter.Router.IRouter {
        
        public RouterClient() {
        }
        
        public RouterClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RouterClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RouterClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RouterClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetDomainForInstall(string InstallName) {
            return base.Channel.GetDomainForInstall(InstallName);
        }
        
        public System.Threading.Tasks.Task<string> GetDomainForInstallAsync(string InstallName) {
            return base.Channel.GetDomainForInstallAsync(InstallName);
        }
        
        public string Ping() {
            return base.Channel.Ping();
        }
        
        public System.Threading.Tasks.Task<string> PingAsync() {
            return base.Channel.PingAsync();
        }
        
        public bool SegmentChanged(string InstallName) {
            return base.Channel.SegmentChanged(InstallName);
        }
        
        public System.Threading.Tasks.Task<bool> SegmentChangedAsync(string InstallName) {
            return base.Channel.SegmentChangedAsync(InstallName);
        }
    }
}
